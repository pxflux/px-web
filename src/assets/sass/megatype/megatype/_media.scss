// =====================================================
// ------------ Megatype media query mixins ------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Megatype: https://github.com/StudioThick/megatype
// =====================================================

@use 'sass:math';
@use 'sass:meta';
@use 'sass:map';


// Media queries. Accepts px or em
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin media($min: 0, $max: 0) {
    // Type of break variable
    $min-val: meta.type-of($min);
    $min-unit: math.unit($min);

    $max-val: '';
    $max-unit: '';

    // Make sure breakpoints aren't the same, or provided as the first breakpoint key (0)
    @if $min != $max or $min == 0 {
        @if $max != 0 {
            $max-val: meta.type-of($max);
            $max-unit: math.unit($max);
        }

        @if $min-unit == "px" {
            $min: math.div(no-unit($min), 16) * 1em;
        }

        @if $max-unit == "px" {
            $max: math.div(no-unit($max), 16) * 1em;
        }

        $query: "all" !default;

        // If it is a number then we can proceed
        @if $min-val == number or $max-val == number {
            // first, lets kick any breakpoint variables back to the breakpoint-layout mixin, which can handle these
            @if math.is-unitless($min) and math.is-unitless($max) {
                @if map.has-key($breakpoint-map, $min) {
                    // make current breakpoint context available in global scope
                    $current-breakpoint: $min !global;
                    $current-rootsize: break-get($min, rootsize) !global;

                    @if $current-breakpoint == 0 and $max == 0 {
                        @content;
                    } @else {
                        $minw: break-get($min, start);
                        $maxw: none;

                        @if map.has-key($breakpoint-map, $max) {
                            $maxw: break-get($max, start) - 1px;
                        } @else {
                            @warn "#{$max} is not a valid breakpoint number";
                        }

                        @if $min != 0 and $max != 0 {
                            @include media($minw, $maxw) {
                                @content;
                            }
                        } @else if $min != 0 {
                            @include media($minw) {
                                @content;
                            }
                        } @else if $max != 0 {
                            @include media(0, $maxw) {
                                @content;
                            }
                        }
                    }

                    // reset current breakpoint context
                    $current-breakpoint: 0 !global;
                    $current-rootsize: break-get(0, rootsize) !global;
                } @else {
                    @warn "#{$min} is not a valid breakpoint number";
                }
            } @else {
                @if $min-unit == "px" or $min-unit == "em" {
                    // If using other numbers output value in ems either for min, min & max or max width breakpoints.
                    @if $max-unit == "px" or $max-unit == "em" {
                        $query: "(min-width: #{$min}) and (max-width: #{$max})";
                    } @else {
                        $query: "(min-width: #{$min})";
                    }
                } @else if $max-unit == "px" or $max-unit == "em" {
                    $query: "(max-width: #{$max})";
                } @else {
                    @error "#{$min} and #{$max} are not valid for use in media query mixin - must use px or ems";
                }

                @if $query != "all" {
                    @media #{$query} { @content; }
                } @else {
                    @error "#{$min} and #{$max} did not resolve to a valid media query, styles not output";
                }
            }
        } @else {
            @error "#{$min} and #{$max} values do not form a valid media query";
        }
    } @else {
        @warn "Provided #{$min} and #{$max} breakpoints are the same and will not produce any styles, so this query has not been output";
    }
}

// WARNING: depreciated, may not work in future versions
// fallback included for backwards compatible support
@mixin breakpoint-layout($min: 0, $max: 0) {
    @warn "breakpoint-layout mixin depreciated in 1.0.11 and may not work in future versions. Use media mixin instead";

    @include media($min, $max) {
        @content;
    };
}

// apply min-width media query to one or more breakpoints
@mixin min-width($apply-breaks: 0) {
    @each $break in $apply-breaks {
        @include media($break) {
            @content;
        };
    }
}

// apply max-width media query to one or more breakpoints
@mixin max-width($apply-breaks: 1) {
    @each $break in $apply-breaks {
        @include media(0, $break) {
            @content;
        };
    }
}

// apply a style at all breakpoints, taking into account any change in baseline at different breakpoints
@mixin all-breakpoints {
    @each $break in $breaks {
        @include media($break) {
            @content;
        }
    }
}
